const {countOverlapping, generateDiffArrayFromPoint, findMatchingRotation, produceRotation} = require('./utils')
const actualFullList = [
  [-892, 524, 684],
  [-876, 649, 763],
  [-838, 591, 734],
  [-789, 900, -551],
  [-739, -1745, 668],
  [-706, -3180, -659],
  [-697, -3072, -689],
  [-689, 845, -530],
  [-687, -1600, 576],
  [-661, -816, -575],
  [-654, -3158, -753],
  [-635, -1737, 486],
  [-631, -672, 1502],
  [-624, -1620, 1868],
  [-620, -3212, 371],
  [-618, -824, -621],
  [-612, -1695, 1788],
  [-601, -1648, -643],
  [-584, 868, -557],
  [-537, -823, -458],
  [-532, -1715, 1894],
  [-518, -1681, -600],
  [-499, -1607, -770],
  [-485, -357, 347],
  [-470, -3283, 303],
  [-456, -621, 1527],
  [-447, -329, 318],
  [-430, -3130, 366],
  [-413, -627, 1469],
  [-345, -311, 381],
  [-36, -1284, 1171],
  [-27, -1108, -65],
  [7, -33, -71],
  [12, -2351, -103],
  [26, -1119, 1091],
  [346, -2985, 342],
  [366, -3059, 397],
  [377, -2827, 367],
  [390, -675, -793],
  [396, -1931, -563],
  [404, -588, -901],
  [408, -1815, 803],
  [423, -701, 434],
  [432, -2009, 850],
  [443, 580, 662],
  [455, 729, 728],
  [456, -540, 1869],
  [459, -707, 401],
  [465, -695, 1988],
  [474, 580, 667],
  [496, -1584, 1900],
  [497, -1838, -617],
  [527, -524, 1933],
  [528, -643, 409],
  [534, -1912, 768],
  [544, -627, -890],
  [553, 345, -567],
  [564, 392, -477],
  [568, -2007, -577],
  [605, -1665, 1952],
  [612, -1593, 1893],
  [630, 319, -379],
  [686, -3108, -505],
  [776, -3184, -501],
  [846, -3110, -434],
  [1135, -1161, 1235],
  [1243, -1093, 1063],
  [1660, -552, 429],
  [1693, -557, 386],
  [1735, -437, 1738],
  [1749, -1800, 1813],
  [1772, -405, 1572],
  [1776, -675, 371],
  [1779, -442, 1789],
  [1780, -1548, 337],
  [1786, -1538, 337],
  [1847, -1591, 415],
  [1889, -1729, 1762],
  [1994, -1805, 1792],
]

let original2 = [
  [649, 640, 665],
  [682, -795, 504],
  [-784, 533, -524],
  [-644, 584, -595],
  [-588, -843, 648],
  [-30, 6, 44],
  [-674, 560, 763],
  [500, 723, -460],
  [609, 671, -379],
  [-555, -800, 653],
  [-675, -892, -343],
  [697, -426, -610],
  [578, 704, 681],
  [493, 664, -388],
  [-671, -858, 530],
  [-667, 343, 800],
  [571, -461, -707],
  [-138, -166, 112],
  [-889, 563, -600],
  [646, -828, 498],
  [640, 759, 510],
  [-630, 509, 768],
  [-681, -892, -333],
  [673, -379, -804],
  [-742, -814, -386],
  [577, -820, 562],
];

let fullListWithoutTwo = [
  [404, -588, -901],
  [528, -643, 409],
  [-838, 591, 734],
  [390, -675, -793],
  [-537, -823, -458],
  [-485, -357, 347],
  [-345, -311, 381],
  [-661, -816, -575],
  [-876, 649, 763],
  [-618, -824, -621],
  [553, 345, -567],
  [474, 580, 667],
  [-447, -329, 318],
  [-584, 868, -557],
  [544, -627, -890],
  [564, 392, -477],
  [455, 729, 728],
  [-892, 524, 684],
  [-689, 845, -530],
  [423, -701, 434],
  [7, -33, -71],
  [630, 319, -379],
  [443, 580, 662],
  [-789, 900, -551],
  [459, -707, 401],
  [-27, -1108, -65],
  [408, -1815, 803],
  [-499, -1607, -770],
  [-601, -1648, -643],
  [568, -2007, -577],
  [534, -1912, 768],
  [497, -1838, -617],
  [-635, -1737, 486],
  [396, -1931, -563],
  [-518, -1681, -600],
  [432, -2009, 850],
  [-739, -1745, 668],
  [-687, -1600, 576],
  [-697, -3072, -689],
  [366, -3059, 397],
  [-430, -3130, 366],
  [-620, -3212, 371],
  [-654, -3158, -753],
  [846, -3110, -434],
  [12, -2351, -103],
  [-470, -3283, 303],
  [686, -3108, -505],
  [346, -2985, 342],
  [377, -2827, 367],
  [776, -3184, -501],
  [-706, -3180, -659],
  [-612, -1695, 1788],
  [-631, -672, 1502],
  [612, -1593, 1893],
  [465, -695, 1988],
  [-413, -627, 1469],
  [-456, -621, 1527],
  [-36, -1284, 1171],
  [456, -540, 1869],
  [527, -524, 1933],
  [-532, -1715, 1894],
  [-624, -1620, 1868],
  [496, -1584, 1900],
  [605, -1665, 1952],
  [26, -1119, 1091],
];

const missing = actualFullList.filter(arr => {
  return !fullListWithoutTwo.find(arr2 => {
    return arr[0] === arr2[0] && arr[1] === arr2[1] && arr[2] === arr2[2]
  });
});

const findNumberOverlapping2d = (arr1, arrr2) => {
  return arr1.filter(arr => {
    return arrr2.find(arr2 => {
      return arr[0] === arr2[0] && arr[1] === arr2[1] && arr[2] === arr2[2]
    });
  }).length;
};

// console.log(findNumberOverlapping2d([
//   [1, 2, 3],
//   [4, 5, 6],
//   [7, 9, 0]
// ],
//   [
//     [4, 4, 4],
//     [1, 2, 3],
//     [4, 5, 6]
//   ]))
const rots = produceRotation(original2)

const expected = [1105, -1205, 1229]

// rots.forEach((rot, idx) => {
//   fullListWithoutTwo.forEach((missingPoint, midx) => {
//     let diff = generateDiffArrayFromPoint(fullListWithoutTwo, midx, rot, idx)
//     let count = findNumberOverlapping2d(diff, missing)
//     if (count > 0) {
//       console.log(idx, count, missingPoint)
//     }
//
//   })
// })

rots.forEach(
  (rot, ridx) => {
    let diff = rot.map((point) => {
      return [point[0] + 1105, point[1] + -1205, point[2] + 1229]
    })
    let count = countOverlapping(diff, missing)
    if (count > 10) {
      console.log(ridx, count)
      fullListWithoutTwo.forEach((b, bidx) => {
        rot.forEach((a, aidx) => {
          const change = [b[0] - a[0], b[1] - a[1], b[2] - a[2]]
          if (change[0] === 1105) {
            console.log(change, aidx, bidx)
          };
        })
      })
      const [valid, change, diff] = generateDiffArrayFromPoint(fullListWithoutTwo, 19, rot, 1)
      console.log(valid, change, diff)
      console.log(countOverlapping(diff, fullListWithoutTwo))
    }
  }
);
console.log(findMatchingRotation(rots, fullListWithoutTwo))
